/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SLAInterface extends ethers.utils.Interface {
  functions: {
    "DSLAburnRate()": FunctionFragment;
    "addAllowedTokens(address)": FunctionFragment;
    "addUsersToWhitelist(address[])": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "contractFinished()": FunctionFragment;
    "creationBlockNumber()": FunctionFragment;
    "dpTokenRegistry(address)": FunctionFragment;
    "duTokenRegistry(address)": FunctionFragment;
    "extraData(uint256)": FunctionFragment;
    "finalPeriodId()": FunctionFragment;
    "getAllowedTokensLength()": FunctionFragment;
    "getStakersLength()": FunctionFragment;
    "initialPeriodId()": FunctionFragment;
    "ipfsHash()": FunctionFragment;
    "isAllowedPeriod(uint256)": FunctionFragment;
    "isAllowedToken(address)": FunctionFragment;
    "leverage()": FunctionFragment;
    "messengerAddress()": FunctionFragment;
    "nextVerifiablePeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodSLIs(uint256)": FunctionFragment;
    "periodType()": FunctionFragment;
    "providerPool(address)": FunctionFragment;
    "registerSLI(uint256,uint256)": FunctionFragment;
    "registeredStakers(address)": FunctionFragment;
    "removeUsersFromWhitelist(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "slaID()": FunctionFragment;
    "stakeTokens(uint256,address,string)": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userWithdrawLocked()": FunctionFragment;
    "usersPool(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "whitelistedContract()": FunctionFragment;
    "withdrawProviderTokens(uint256,address)": FunctionFragment;
    "withdrawUserTokens(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DSLAburnRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addUsersToWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractFinished",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creationBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dpTokenRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "duTokenRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "extraData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ipfsHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAllowedPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "leverage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messengerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextVerifiablePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodSLIs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "providerPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSLI",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredStakers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUsersFromWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "slaID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawLocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usersPool", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "whitelistedContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProviderTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUserTokens",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DSLAburnRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUsersToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dpTokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "duTokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extraData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipfsHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messengerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextVerifiablePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "periodSLIs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "periodType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "providerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSLI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUsersFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slaID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usersPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProviderTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUserTokens",
    data: BytesLike
  ): Result;

  events: {
    "DTokensCreated(address,address,string,string,address,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProviderRewardGenerated(uint256,address,uint256,uint256,uint256)": EventFragment;
    "ProviderWithdraw(address,uint256,address,uint256)": EventFragment;
    "SLICreated(uint256,uint256,uint256)": EventFragment;
    "Stake(address,uint256,address,uint256)": EventFragment;
    "UserCompensationGenerated(uint256,address,uint256,uint256,uint256)": EventFragment;
    "UserWithdraw(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DTokensCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderRewardGenerated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SLICreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserCompensationGenerated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWithdraw"): EventFragment;
}

export class SLA extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SLAInterface;

  functions: {
    DSLAburnRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAllowedTokens(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUsersToWhitelist(
      _userAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contractFinished(overrides?: CallOverrides): Promise<[boolean]>;

    creationBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    dpTokenRegistry(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    duTokenRegistry(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    extraData(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    finalPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllowedTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    ipfsHash(overrides?: CallOverrides): Promise<[string]>;

    isAllowedPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllowedToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    messengerAddress(overrides?: CallOverrides): Promise<[string]>;

    nextVerifiablePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodSLIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        timestamp: BigNumber;
        sli: BigNumber;
        status: number;
      }
    >;

    periodType(overrides?: CallOverrides): Promise<[number]>;

    providerPool(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    registerSLI(
      _sli: BigNumberish,
      _periodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredStakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeUsersFromWhitelist(
      _userAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slaID(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeTokens(
      _amount: BigNumberish,
      _token: string,
      _position: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userWithdrawLocked(overrides?: CallOverrides): Promise<[boolean]>;

    usersPool(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    whitelistedContract(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawProviderTokens(
      _amount: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUserTokens(
      _amount: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DSLAburnRate(overrides?: CallOverrides): Promise<BigNumber>;

  addAllowedTokens(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUsersToWhitelist(
    _userAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  contractFinished(overrides?: CallOverrides): Promise<boolean>;

  creationBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  dpTokenRegistry(arg0: string, overrides?: CallOverrides): Promise<string>;

  duTokenRegistry(arg0: string, overrides?: CallOverrides): Promise<string>;

  extraData(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  finalPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  getAllowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  getStakersLength(overrides?: CallOverrides): Promise<BigNumber>;

  initialPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  ipfsHash(overrides?: CallOverrides): Promise<string>;

  isAllowedPeriod(
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllowedToken(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  leverage(overrides?: CallOverrides): Promise<BigNumber>;

  messengerAddress(overrides?: CallOverrides): Promise<string>;

  nextVerifiablePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodSLIs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      timestamp: BigNumber;
      sli: BigNumber;
      status: number;
    }
  >;

  periodType(overrides?: CallOverrides): Promise<number>;

  providerPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  registerSLI(
    _sli: BigNumberish,
    _periodId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredStakers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removeUsersFromWhitelist(
    _userAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slaID(overrides?: CallOverrides): Promise<BigNumber>;

  stakeTokens(
    _amount: BigNumberish,
    _token: string,
    _position: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userWithdrawLocked(overrides?: CallOverrides): Promise<boolean>;

  usersPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  whitelistedContract(overrides?: CallOverrides): Promise<boolean>;

  withdrawProviderTokens(
    _amount: BigNumberish,
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUserTokens(
    _amount: BigNumberish,
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DSLAburnRate(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedTokens(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addUsersToWhitelist(
      _userAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    contractFinished(overrides?: CallOverrides): Promise<boolean>;

    creationBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    dpTokenRegistry(arg0: string, overrides?: CallOverrides): Promise<string>;

    duTokenRegistry(arg0: string, overrides?: CallOverrides): Promise<string>;

    extraData(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    finalPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getStakersLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    ipfsHash(overrides?: CallOverrides): Promise<string>;

    isAllowedPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    leverage(overrides?: CallOverrides): Promise<BigNumber>;

    messengerAddress(overrides?: CallOverrides): Promise<string>;

    nextVerifiablePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodSLIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        timestamp: BigNumber;
        sli: BigNumber;
        status: number;
      }
    >;

    periodType(overrides?: CallOverrides): Promise<number>;

    providerPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerSLI(
      _sli: BigNumberish,
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredStakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeUsersFromWhitelist(
      _userAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    slaID(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokens(
      _amount: BigNumberish,
      _token: string,
      _position: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userWithdrawLocked(overrides?: CallOverrides): Promise<boolean>;

    usersPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    whitelistedContract(overrides?: CallOverrides): Promise<boolean>;

    withdrawProviderTokens(
      _amount: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUserTokens(
      _amount: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DTokensCreated(
      tokenAddress?: string | null,
      dpTokenAddress?: string | null,
      dpTokenName?: null,
      dpTokenSymbol?: null,
      duTokenAddress?: string | null,
      duTokenName?: null,
      duTokenSymbol?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string],
      {
        tokenAddress: string;
        dpTokenAddress: string;
        dpTokenName: string;
        dpTokenSymbol: string;
        duTokenAddress: string;
        duTokenName: string;
        duTokenSymbol: string;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ProviderRewardGenerated(
      periodId?: BigNumberish | null,
      tokenAddress?: string | null,
      rewardPercentage?: null,
      rewardPercentagePrecision?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        periodId: BigNumber;
        tokenAddress: string;
        rewardPercentage: BigNumber;
        rewardPercentagePrecision: BigNumber;
        rewardAmount: BigNumber;
      }
    >;

    ProviderWithdraw(
      tokenAddress?: string | null,
      periodId?: BigNumberish | null,
      caller?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        tokenAddress: string;
        periodId: BigNumber;
        caller: string;
        amount: BigNumber;
      }
    >;

    SLICreated(
      timestamp?: null,
      sli?: null,
      periodId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { timestamp: BigNumber; sli: BigNumber; periodId: BigNumber }
    >;

    Stake(
      tokenAddress?: string | null,
      periodId?: BigNumberish | null,
      caller?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        tokenAddress: string;
        periodId: BigNumber;
        caller: string;
        amount: BigNumber;
      }
    >;

    UserCompensationGenerated(
      periodId?: BigNumberish | null,
      tokenAddress?: string | null,
      usersStake?: null,
      leverage?: null,
      compensation?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        periodId: BigNumber;
        tokenAddress: string;
        usersStake: BigNumber;
        leverage: BigNumber;
        compensation: BigNumber;
      }
    >;

    UserWithdraw(
      tokenAddress?: string | null,
      periodId?: BigNumberish | null,
      caller?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        tokenAddress: string;
        periodId: BigNumber;
        caller: string;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    DSLAburnRate(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedTokens(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUsersToWhitelist(
      _userAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractFinished(overrides?: CallOverrides): Promise<BigNumber>;

    creationBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    dpTokenRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    duTokenRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getStakersLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    ipfsHash(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverage(overrides?: CallOverrides): Promise<BigNumber>;

    messengerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nextVerifiablePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodSLIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodType(overrides?: CallOverrides): Promise<BigNumber>;

    providerPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerSLI(
      _sli: BigNumberish,
      _periodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredStakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeUsersFromWhitelist(
      _userAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slaID(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokens(
      _amount: BigNumberish,
      _token: string,
      _position: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userWithdrawLocked(overrides?: CallOverrides): Promise<BigNumber>;

    usersPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawProviderTokens(
      _amount: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUserTokens(
      _amount: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DSLAburnRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAllowedTokens(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUsersToWhitelist(
      _userAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creationBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dpTokenRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duTokenRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalPeriodId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowedTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialPeriodId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ipfsHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowedPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messengerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextVerifiablePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodSLIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providerPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerSLI(
      _sli: BigNumberish,
      _periodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredStakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeUsersFromWhitelist(
      _userAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slaID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeTokens(
      _amount: BigNumberish,
      _token: string,
      _position: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userWithdrawLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawProviderTokens(
      _amount: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUserTokens(
      _amount: BigNumberish,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
