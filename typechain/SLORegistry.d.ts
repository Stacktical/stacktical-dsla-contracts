/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SLORegistryInterface extends ethers.utils.Interface {
  functions: {
    "getDeviation(uint256,address,uint256)": FunctionFragment;
    "isRespected(uint256,address)": FunctionFragment;
    "registerSLO(uint256,uint8,address)": FunctionFragment;
    "registeredSLO(address)": FunctionFragment;
    "setSLARegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDeviation",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRespected",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSLO",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredSLO",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSLARegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRespected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSLO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredSLO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSLARegistry",
    data: BytesLike
  ): Result;

  events: {
    "SLORegistered(address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SLORegistered"): EventFragment;
}

export class SLORegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SLORegistryInterface;

  functions: {
    getDeviation(
      _sli: BigNumberish,
      _slaAddress: string,
      _precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isRespected(
      _value: BigNumberish,
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerSLO(
      _sloValue: BigNumberish,
      _sloType: BigNumberish,
      _slaAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredSLO(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { sloValue: BigNumber; sloType: number }>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getDeviation(
    _sli: BigNumberish,
    _slaAddress: string,
    _precision: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isRespected(
    _value: BigNumberish,
    _slaAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerSLO(
    _sloValue: BigNumberish,
    _sloType: BigNumberish,
    _slaAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredSLO(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { sloValue: BigNumber; sloType: number }>;

  setSLARegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDeviation(
      _sli: BigNumberish,
      _slaAddress: string,
      _precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRespected(
      _value: BigNumberish,
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerSLO(
      _sloValue: BigNumberish,
      _sloType: BigNumberish,
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredSLO(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { sloValue: BigNumber; sloType: number }>;

    setSLARegistry(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    SLORegistered(
      sla?: string | null,
      sloValue?: null,
      sloType?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { sla: string; sloValue: BigNumber; sloType: number }
    >;
  };

  estimateGas: {
    getDeviation(
      _sli: BigNumberish,
      _slaAddress: string,
      _precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRespected(
      _value: BigNumberish,
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerSLO(
      _sloValue: BigNumberish,
      _sloType: BigNumberish,
      _slaAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredSLO(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDeviation(
      _sli: BigNumberish,
      _slaAddress: string,
      _precision: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRespected(
      _value: BigNumberish,
      _slaAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerSLO(
      _sloValue: BigNumberish,
      _sloType: BigNumberish,
      _slaAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredSLO(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSLARegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
